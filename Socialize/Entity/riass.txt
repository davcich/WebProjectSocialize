architettura client-server
il client effettua una richiesta HTTP al web server apache che la elabora svolgendo le dovute operazioni (elaborazione codice php, prelievo dati da hard disk, dbms,ecc) e manda la risultante pagina HTML al client (può contenere software aggiuntivo in base al bilanciamento di client fat/thin). l'HTTP è indipendente dall'HTML ed è stateless, ossia il server non mantiene informazioni persistenti riguardanti una connessione come l'identità dei client eccetera. il client dovrà quindi ricreare da zero la connessione col server in caso di future comunicazioni.
fat client: molte possibilità di compiere operazioni lato client con limitati accessi al server. un client si rende FAT grazie a javascript, ecc.
all'interno di un messaggio di posta il MIME type presente all'interno del messaggio fornisce informazioni aggiuntive su metodi di codifica del messaggio, tipo di contenuto ed altri dettagli del formato
esempio di interazione client-server:
l'utente attraverso il browser specifica un URL, il nome del server è tradotto nel corrispondente IP tramite il servizio DNS, il client si connette quindi tramite la porta 80 (HTTP via TCP), richiede la risorsa, il server risponde ed invia le risorse chieste e quindi chiude la connessione.
HTTP 1.0 vs HTTP 1.1: nell'1.1 si possono fare coppie multiple di richiesta e risposta nella stessa connessione TCP.
le richieste vengono messe in pipiline ma le risposte devono arrivare nello stesso ordine di richiesta perchè non esiste un metodo di riordinamento.

codici errori HTTP:
2xx: successo - 200 OK
3xx: redirection
4xx: client error - 400 errore sintattico richiesta - 401 non autorizzato - 403 forbidden - 404 not found(url errato)
5xx: server error (solitamente CGI mal fatto)

metodi http:
GET - il piu comune per richiedere risorse dal server
HEAD - come get ma il server manda solo gli headers
POST- per mandare dati al server